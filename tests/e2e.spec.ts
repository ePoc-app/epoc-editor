import { test } from '@playwright/test';
const {  _electron: electron } = require('playwright');

let electronApp;
let window;

test.describe('create a new ePoc', () => {
    test.beforeAll(async () => {
        electronApp = await electron.launch({ args: ['electron/electron.js'] });
        await sleep(2000);
        window = await electronApp.firstWindow();
    });
    
    test.afterAll(async () => {
        await electronApp.close();
    }); 

    test('create a new project', (async () => {
        await window.click('text=Créer un nouveau projet');
        await sleep(2000);
    }));
    
    test('create a new chapter', (async () => {
        await addChapter(window);
        await sleep(500);
    }));
    
    test('drag & drop a text node', (async () => {
        const source = await window.$('#text');
        const sourceBox = await source.boundingBox();
    
        const dropLocation = { x: sourceBox.x + sourceBox.width + 400, y: sourceBox.y + sourceBox.height + 400 };
    
        await dragDrop(source, dropLocation, window);
        await sleep(500);
    }));
    
    test('link a node', (async () => {
        const nodes = await window.$$eval('.node', nodes => nodes.map(node => node.id.substr(4)));
    
        const sourceId = '3';
        const targetId = await nodes[0];
    
        await linkHandle(sourceId, targetId, window);
        await sleep(500);
    }));

    test('adding an element to node', async () => {
        const nodes = await window.$('.node');
        const targetBox = await nodes.boundingBox();

        const source = await window.$('#video');

        //! Doesn't work if doing + targetBox.width/2
        await dragDrop(source, { x: targetBox.x + 50, y: targetBox.y + 50 }, window);
        await sleep(500);
    });

    test('openening the epoc form', async () => {
        const epocNode = await window.$('.vue-flow__node-epoc');
        await epocNode.click();
        await sleep(1500);
        await window.mainFrame().waitForSelector('.formPanel');
    });

    test('filling the epoc form', async () => {
        const titleInput = await window.$('#Titre');
        await titleInput.fill('Titre de l\'ePoc généré par Playwright');
        const descriptionInput = await window.$('.ql-editor');
        await descriptionInput.fill('Description générée par Playwright');
        const addButtons = await window.$$('.add-card');
        const addAuthorButton = addButtons[0];
        await addAuthorButton.click();
        await sleep(500);
        await addAuthorButton.click();

        const authorCards = await window.$$('.Auteur');

        const firstAuthor = {
            name: 'Jhon Doe',
            role: 'Chercheur',
            description: 'Description de l\'auteur générée par Playwright'
        };
        const secondAuthor = {
            name: 'Jane Doe',
            role: 'Chercheuse',
            description: 'Description de l\'auteur générée par Playwright'
        };

        await fillAuthorForm(firstAuthor, authorCards[0]);
        await fillAuthorForm(secondAuthor, authorCards[1]);

        const addObjectiveButton = addButtons[1];
        await addObjectiveButton.click();
        await sleep(500);
        await addObjectiveButton.click();
        

        const cards = await window.$$('.Objectif');

        await fillObjective('first objective generated by playwright', cards[0]);
        await fillObjective('second objective generated by playwright', cards[1]);

        
    });

    test('openening the first chapter form', async () => {
        const chapterNode = await window.$('.vue-flow__node-chapter');
        await chapterNode.click();
        await sleep(1500);
        await window.mainFrame().waitForSelector('.formPanel');
    });

    test('fill the first chapter form', async() => {
        const titleInput = await window.$('#Titre');
        await titleInput.fill('Titre du chapitre généré par Playwright');
        await sleep(500);
        const addButton = await window.$('.add-card');
        await addButton.click();
        await sleep(500);
        await addButton.click();

        const cards = await window.$$('.Objectif');
        await fillObjective('first objective generated by playwright', cards[0]);
        await fillObjective('second objective generated by playwright', cards[1]);

        await sleep(500);
    });
});

async function dragDrop(source, dropLocation, window) {
    await source.hover();
    await window.mouse.down();
    await window.mouse.move(dropLocation.x, dropLocation.y);
    await window.mouse.up();
}

async function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function addChapter(window) {
    const addChapterButton = await window.$('.add-chapter');
    await addChapterButton.click();
}

async function linkHandle(sourceId, targetId, window) {
    const sourceHandleId = `vue-flow__handle-${sourceId}__handle-right`;
    const targetHandleId = `vue-flow__handle-${targetId}__handle-left`;

    const sourceHandle = await window.$(`.${sourceHandleId}`);
    const targetHandle = await window.$(`.${targetHandleId}`);

    await dragDrop(sourceHandle, await targetHandle.boundingBox(), window);
}

async function fillAuthorForm(values, card) {
    // console.log('log', card);
    const nameInput = await card.$('#Nom');
    await nameInput.fill(values.name);

    const roleInput = await card.$('#Titre');
    await roleInput.fill(values.role);

    const descriptionInput = await card.$('.ql-editor');
    await descriptionInput.fill(values.description);
}

async function fillObjective(value, card) {
    const input = await card.$('.input-textarea');
    await input.fill(value);
}